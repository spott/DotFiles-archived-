"""""""""""""""""""""""""""""""""""""""
" VimRC - with all the bells and 
"	whistles
"""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""
" initialization stuff
" 	- initialize environment variables
"""""""""""""""""""""""""""""""""""""""
let $VIMHOME=$HOME."/DotFiles/vim"
let $VIM=$HOME."/DotFiles/vim"
set runtimepath=~/DotFiles/vim/,$VIMRUNTIME
"""""""""""""""""""""""""""""""""""""""
" Vundle
"""""""""""""""""""""""""""""""""""""""

" Init stuff
set nocompatible
filetype on
filetype off

set rtp+=~/DotFiles/vim/vundle.git/
call vundle#rc()

" Bundles
Bundle 'OmniCppComplete'
Bundle 'fortran.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'fugitive.vim'
Bundle 'LaTeX-Suite-aka-Vim-LaTeX'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'cpp.vim'
Bundle 'YankRing.vim'
Bundle 'sjl/threesome.vim.git'
Bundle 'mru.vim'
Bundle 'majutsushi/tagbar'
Bundle 'scrooloose/nerdcommenter'
Bundle 'Rainbow-Parenthesis'
Bundle 'rosenfeld/conque-term'
Bundle 'sandeepcr529/Buffet.vim'
Bundle 'SirVer/ultisnips'
Bundle 'tpope/vim-surround'
Bundle 'scrooloose/syntastic'
Bundle 'sophacles/vim-outliner'
Bundle 'ShowMarks'
Bundle 'int3/vim-extradite'
Bundle 'aghareza/vim-gitgrep'
Bundle 'guicolorscheme.vim'
Bundle 'argtextobj.vim'
Bundle 'kana/vim-textobj-function'



"""""""""""""""""""""""""""""""""""""""
" General stuff:
"""""""""""""""""""""""""""""""""""""""

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set backupdirectory 
" (where the .sw files go, avoids cluttering up 
"  the current directory)
set backupdir=~/tmp/

" Enable syntax highlighting, however, source
" my syntax files.
syntax enable

" wrap lines
set wrap linebreak

"folding
set foldmethod=indent   "fold based on indent
set nofoldenable

" Set tabstop to 4 and shiftwidth to 4
set tabstop=4
set shiftwidth=4
set expandtab

" Set undo levels and keep across sessions
set ul=1000
set undodir=~/tmp/
set undofile

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

" Autoread modified files:
set autoread

" make switching buffers to use tabs and open windows
set switchbuf=usetab

"Map the leader to ','
let mapleader = ","
let g:mapleader = ","

"edit vimrc easily
map <leader>ev :e! $VIMHOME/vimrc<cr>

" When vimrc is edited, reload it
autocmd! bufwritepost $VIMHOME/vimrc source $VIMHOME/vimrc

" set encoding to utf8
set encoding=utf8
try
    lang en_US
catch
endtry

"""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""
" Language Specific Stuff
"""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""
" Python
"""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""
" Fortran fixed/free stuff
"""""""""""""""""""""""""""""""""""""""
au filetype fortran nmap <leader>ll make all
au BufRead,BufNewFile *.f90 let b:fortran_fixed_source=0
au BufRead,BufNewFile *.f let b:fortran_fixed_source=0
let s:extfname = expand("%:e")
if s:extfname ==? "f90"
	let fortran_free_source=1
	unlet! fortran_fixed_source
    let fortran_fold=1
    let fortran_more_precise=1
else
	let fortran_fixed_source=1
	unlet! fortran_free_source
endif

"""""""""""""""""""""""""""""""""""""""
" C++/C programming
"""""""""""""""""""""""""""""""""""""""
au filetype c++ nnoremap <leader>ll make all
au filetype c nnoremap <leader>ll make all
au filetype ch nnoremap <leader>ll make all

au filetype c++ set cindent
au filetype c set cindent
au filetype ch set cindent

"""""""""""""""""""""""""""""""""""""""
" Quickfix stuff
"""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <F4> :botright cwindow 5<CR>

" move to the next and previous error"
map cn <esc>:cn<cr>
map cp <esc>:cp<cr>

"map <leader>cc :.cc<CR>

"""""""""""""""""""""""""""""""""""""""
" Spell Checking
"""""""""""""""""""""""""""""""""""""""

"Pressing ,ss will toggle and untoggle spell checking
map <leader>sc :setlocal spell!<cr>

"Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

"""""""""""""""""""""""""""""""""""""""
" Search stuff
"""""""""""""""""""""""""""""""""""""""

" ignore the case when searching, unless a capitol letter is
" in the search string
set ignorecase 
set smartcase

" highlight the search values
set hlsearch

" set a leader shortcut to turn off highlighting:
map <leader>hl :nohlsearch<CR>

" Make search act like search in modern browsers
set incsearch 

"Show matching brackets when text indicator is over them
set showmatch 

"How many tenths of a second to blink
set mat=5 

"""""""""""""""""""""""""""""""""""""""
" UI stuff
"""""""""""""""""""""""""""""""""""""""

"colormode stuff
set background=dark

"highlight current line
set cul             

" for terminal, the titlebar will be set to the filename
set title

" show line, and column number in bottom
set ruler

" use the visualbell for errors
set visualbell

" wildmenu stuff.  when tab completing commandline stuff
set wildmenu
set wildmode=list:longest

if has("gui_running")
	set guioptions-=T "set no toolbar"
	colorscheme desert
	set anti
	set window=51
	"set lines=56 columns=205
	if hostname() ==? "Serenity"
		set lines=60 columns=200
		set fu
		set fuoptions=maxhorz,maxvert
	endif
endif

"""""""""""""""""""""""""""""""""""""""
" Moving around
"""""""""""""""""""""""""""""""""""""""

" moving between windows easily
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" keymaps for switching buffers
noremap <C-h> :sbp<CR>
noremap <C-l> :sbn<CR>

" allow backspacing over an indent, if you want to backspace over the start of
" insert, add 'start' to this list
set backspace=indent,start

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

" Use the arrows to something usefull
map <right> :tabnext<cr>
map <left> :tabprevious<cr>

" Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>te :tabedit 
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 

"""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""
" Plugin stuff
"""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""
" => Syntastic
"""""""""""""""""""""""""""""""""""""""
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_include_dirs = [ '/usr/local/include/', $PWD, $HOME.'/Documents/EnergyBasisSchrodingerSolver/' ]
let g:syntastic_cpp_auto_refresh_includes = 1

let g:syntastic_c_include_dirs = [ '/usr/local/include/', $PWD, $HOME.'/Documents/EnergyBasisSchrodingerSolver/' ]
let g:syntastic_c_auto_refresh_includes = 1

"""""""""""""""""""""""""""""""""""""""
" => Showmarks
"""""""""""""""""""""""""""""""""""""""
let g:showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY"

"""""""""""""""""""""""""""""""""""""""
" => NERDTree
"""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <F3> :NERDTreeToggle<CR>

"""""""""""""""""""""""""""""""""""""""
" => Yankring plugin
"""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <F5> :YRShow<CR>

let g:yankring_history_file = '.vim/yankring_hist'

""""""""""""""""""""""""""""""
" => UltiSnips
""""""""""""""""""""""""""""""
let g:UltiSnipsSnippetsDir = "~/.vim/snips"
let g:UltiSnipsSnippetDirectories=["snips","UltiSnips"]

let g:UltiSnipsEditSplit = "vertical"

let g:UltiSnipsListSnippets="<C-Tab>"
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

""""""""""""""""""""""""""""""
" => Buffet
""""""""""""""""""""""""""""""
map <F1> :Bufferlist<CR>

""""""""""""""""""""""""""""""
" => Taglist
""""""""""""""""""""""""""""""
"look for tags
set tags=tags;$HOME     

" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.tags/trilinos
set tags+=~/.tags/petsc
set tags+=~/.tags/gsl
set tags+=~/.tags/fftw
set tags+=~/.tags/mpi
set tags+=~/.tags/boost-mpi

" build tags for your own project with Ctrl-F12

if g:computer ==? "Serenity"
	map <C-F12> :!/usr/local/bin/ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
else
	map <C-F12> :!/usr/bin/ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
endif

" Taglist variables
" Display function name in status bar:
let g:ctags_statusline=1
" Automatically start script
let generate_tags=1

"Toggle the sidebars
nnoremap <silent> <F2> :TagbarToggle<CR>

""""""""""""""""""""""""""""""
" => LaTeX suite stuff:
""""""""""""""""""""""""""""""
" These settings are needed for latex-suite
let g:tex_flavor='latex'
set grepprg=grep\ -nH\ $*
let g:Tex_ViewRule_pdf = 'open -a Preview'
set iskeyword+=:
"let g:Tex_Folding=0 "I don't like folding.

""""""""""""""""""""""""""""""
" => Omnicppcomplete
""""""""""""""""""""""""""""""
" OmniCppComplete (only for work comp?)
au filetype c++ let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
au filetype c++ let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
au filetype c++ let OmniCpp_MayCompleteDot = 1 " autocomplete after .
au filetype c++ let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
au filetype c++ let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std"]

" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

